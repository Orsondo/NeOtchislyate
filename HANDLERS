from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from datetime import datetime

import keyboards as kb

router = Router()

class Register(StatesGroup):
    name = State()
    group = State()

class Test(StatesGroup):
    answers = State()

class Testtwo(StatesGroup):
    answerss = State()

class Testthree(StatesGroup):
    answersss = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('Привет!')
    await message.reply('Начнем прохождение? Но для начала пройди регистрацию, напиши /register в чат')

@router.message (Command('help'))
async def cmd_help(message: Message):
    await message.answer('Вы нажали на кнопку помощи.')

@router.message (F.text == 'Тесты')
async def testi(message: Message):
    await message.answer('Выберите вариант:', reply_markup=kb.testi)

@router.message (F.text == 'Подготовка')
async def podgot(message: Message):
    await message.answer('Вариант 1: \n\n1 - Зарезервированные слова в программировании-слова и выражения, которые имеют предопределенные значения и не могут использоваться при написании кода для иных целей. \n2 - Константа-постоянная, именованное значение, которое не может быть изменено. Константы могут быть числовыми и строковыми. \n3 - «Анализировать программу»-процесс решения проблемы программы путем разбиения большой проблемы на подзадачи. Каждая подзадача или «под-проблема» будет решаться отдельно, что в конечном итоге приведет к более простому решению глобальной проблемы. \n4 - Бета-версия-версия, которая может быть доработана и изменена после получения обратной связи от пользователей. \n5 - Операторы присваивания-оператор присваивания используется для сохранения значений в переменной.')
    await message.answer('Вариант 2: \n\n1 - Разработчик бота - Березовский Арсений. \n2 - В настоящее время год 2025. \n3 - Настроение у тебя отличное, потому что проходишь наше тестирование). \n4 - Ты сегодня явно встал и с утра вкусно поел, перед прохождением тестов. \n5 - Тест тебе ну не может не нравится.')
    await message.answer('Вариант 3: \n\n1 - Отладка-это процесс поиска и устранения ошибок в программе. \n2 - Алгоритм-это конечный набор шагов, которые при следовании им решают какую-то задачу. \n3 - Блок-схема-это графическое представление программы. Блок-схема помогает понять логику работы программы или ее части при проектировании. \n4 - Переменные-это именованные ячейки памяти, которые используются для хранения данных программы, результатов ее вычислений. Значение переменной может меняться в ходе выполнения программы. \n5 - Массив-это набор смежных областей памяти, которые хранят данные определенного типа.')

@router.message (F.text == 'О нас')
async def onas(message: Message):
    await message.answer('Телеграмм-бот был разработан на языке программирования Python, студентом Комсомольского-на-Амуре Государственного Университета, Березовским Арсением, направления ФКТ, группы 3ИТб-1.\nДанный телеграмм-бот предназначен для тестирования студентов на знание основ программирования.')

@router.callback_query(F.data == 'VARone')
async def VARone(callback: CallbackQuery, state: FSMContext):
    await callback.answer('Вы выбрали вариант')
    await callback.message.answer('Вы выбрали первый вариант.')
    await callback.message.answer('Ответьте на 5 вопросов, в ответ записывается только вариант ответа, ответы нужно писать через пробел')

    await callback.message.answer('1. Что такое зарезервированные слова в программировании? : \na - Языковая конструкция, которая может определять участок программы.  b - Слова и выражения, которые имеют предопределенные значения.  c - Бинарная форма представления кода.  d - Постоянная, именованное значение.')
    await callback.message.answer('2. Что такое константа? : \na - Процесс решения проблемы путем разбиения на подзадачи.  b - Процесс проверки программного обеспечения. c - Гарантированная правильная работа программы.  d - Постоянная, именованное значение, которое не может быть изменено.')
    await callback.message.answer('3. Что значит «анализировать программу»? : \na - Использовать язык, близкий к тому, что используется при программировании.  b - Процесс решения проблемы программы путем разбиения большой проблемы на подзадачи.  c - Для прочтения кода, написанный на определенном языке программирования.  d - Выполнять действие до тех пор, пока заданное условие не станет ложным.')
    await callback.message.answer('4. Что такое бета-версия? : \na - Версия только для разработчиков.  b - Полноценная версия программы, не требующая работа.  c - Версия, которая может быть доработана и изменена после получения обратной связи от пользователей.  d - Версия доступная только для пользователей со специальным доступом (VIP) и тех кто купил программу.')
    await callback.message.answer('5. Зачем нужны операторы присваивания? : \na - Для сохранения значений в переменной.  b - Для обеспечения работы программы.  c - Для стабильной работы кода.  d - Для оптимизации интерфейса пользователя.')

    await state.set_state(Test.answers)

@router.message(Test.answers)
async def collect_answers_var1(message: Message, state: FSMContext):
    user_answers = message.text.strip()
    if not user_answers:
        await message.answer("Пожалуйста, введите ваши ответы.")
        return
    
    # Отправляем обычное сообщение в чат
    await message.answer(f"Вы отправили следующие ответы:\n{user_answers}\n\nПравильные ответы:\nb d b c a\n\nСпасибо за ваши ответы! Желаете пройти ещё?", reply_markup=kb.testi)
    
    # Создаем файл с результатами
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    file_content = f"""РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ
========================

Дата и время: {current_time}
Тест: Вариант 1 (Основы программирования)

Ваши ответы: {user_answers}
Правильные ответы: b d b c a

Вопросы и ответы:
1. Что такое зарезервированные слова в программировании? - Ваш ответ: {user_answers.split()[0] if len(user_answers.split()) > 0 else 'НЕТ'} (правильный: b)
2. Что такое константа? - Ваш ответ: {user_answers.split()[1] if len(user_answers.split()) > 1 else 'НЕТ'} (правильный: d)
3. Что значит «анализировать программу»? - Ваш ответ: {user_answers.split()[2] if len(user_answers.split()) > 2 else 'НЕТ'} (правильный: b)
4. Что такое бета-версия? - Ваш ответ: {user_answers.split()[3] if len(user_answers.split()) > 3 else 'НЕТ'} (правильный: c)
5. Зачем нужны операторы присваивания? - Ваш ответ: {user_answers.split()[4] if len(user_answers.split()) > 4 else 'НЕТ'} (правильный: a)

Спасибо за прохождение теста!
"""
    
    # Отправляем файл
    file_bytes = file_content.encode('utf-8')
    document = BufferedInputFile(file_bytes, filename=f"test_result_var1_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    await message.answer_document(document=document, caption="📄 Ваши результаты теста")
    
    await state.clear()

@router.callback_query(F.data == 'VARtwo')
async def VARtwo(callback: CallbackQuery, state: FSMContext):
    await callback.answer('Вы выбрали вариант')
    await callback.message.answer('Вы выбрали второй вариант, счастливый ;)')
    await callback.message.answer('Ответьте на 5 вопросов, в ответ записывается только вариант ответа, ответы нужно писать через пробел')

    await callback.message.answer('1. Как зовут разработчика данного бота :\na - Березовский Арсений.  b - Сидоров Иван.  c - Моисеева Оксана.  d - Не знаю.')
    await callback.message.answer('2. Какой сегодня год :\na - 2025.  b - 2023.  c - 2027.  d - 2028.')
    await callback.message.answer('3. Какое твое настроение :\na - Отличное(подсказка).  b - Хорошее.  c - Плохое((.  d - Как обычно.')
    await callback.message.answer('4. Ты сегодня вкусно поел?) :\na - Да.  b - Нет.')
    await callback.message.answer('5. Тебе нравится тест? :\na - Да.  b - Нет.')

    await state.set_state(Testtwo.answerss)

@router.message(Testtwo.answerss)
async def collect_answers_var2(message: Message, state: FSMContext):
    user_answers = message.text.strip()
    if not user_answers:
        await message.answer("Пожалуйста, введите ваши ответы.")
        return
    
    # Отправляем обычное сообщение в чат
    await message.answer(f"Вы отправили следующие ответы:\n{user_answers}\n\nПравильные ответы:\na a a a a\n\nСпасибо за ваши ответы! Желаете пройти ещё?", reply_markup=kb.testi)
    
    # Создаем файл с результатами
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    file_content = f"""РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ
========================

Дата и время: {current_time}
Тест: Вариант 2 (О боте)

Ваши ответы: {user_answers}
Правильные ответы: a a a a a

Вопросы и ответы:
1. Как зовут разработчика данного бота? - Ваш ответ: {user_answers.split()[0] if len(user_answers.split()) > 0 else 'НЕТ'} (правильный: a)
2. Какой сегодня год? - Ваш ответ: {user_answers.split()[1] if len(user_answers.split()) > 1 else 'НЕТ'} (правильный: a)
3. Какое твое настроение? - Ваш ответ: {user_answers.split()[2] if len(user_answers.split()) > 2 else 'НЕТ'} (правильный: a)
4. Ты сегодня вкусно поел? - Ваш ответ: {user_answers.split()[3] if len(user_answers.split()) > 3 else 'НЕТ'} (правильный: a)
5. Тебе нравится тест? - Ваш ответ: {user_answers.split()[4] if len(user_answers.split()) > 4 else 'НЕТ'} (правильный: a)

Спасибо за прохождение теста!
"""
    
    # Отправляем файл
    file_bytes = file_content.encode('utf-8')
    document = BufferedInputFile(file_bytes, filename=f"test_result_var2_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    await message.answer_document(document=document, caption="📄 Ваши результаты теста")
    
    await state.clear()

@router.callback_query(F.data == 'VARthree')
async def VARthree(callback: CallbackQuery, state: FSMContext):
    await callback.answer('Вы выбрали вариант')
    await callback.message.answer('Вы выбрали третий вариант.')
    await callback.message.answer('Ответьте на 5 вопросов, в ответ записывается только вариант ответа, ответы нужно писать через пробел')

    await callback.message.answer('1. Что такое отладка? :\na - Процесс поиска и устранения ошибок в программе.  b - Логические ошибки.  c - Графическое представление программы.  d - Поддержка программы.')
    await callback.message.answer('2. Что такое алгоритм? :\na - Код, написанный на определенном языке.  b - Конструкции языка.  c - Конечный набор шагов, которые при следовании им решают какую-то задачу.  d - Бинарная форма представления кода.')
    await callback.message.answer('3. Что такое блок-схема? :\na - Процесс регулярного обновления программы. b - Графическое представление программы.  c - Cпециальные символы, которые используются в коде программы для выполнения определенных операций над данными.  d -  Набор инструкций.')
    await callback.message.answer('4. Что такое переменные? :\na - Зарезервированные или ключевые слова.  b - Языковая конструкция.  c - Именованные ячейки памяти, которые используются для хранения данных программы.  d - Исполняемый машинный код.')
    await callback.message.answer('5. Что такое массив? :\na - это набор смежных областей памяти, которые хранят данные определенного типа.  b - Автономный набор инструкций, которые могут использоваться из любой точки программы.  c - Арифметические операторы.  d - Более сложные алгоритмы.')

    await state.set_state(Testthree.answersss)

@router.message(Testthree.answersss)
async def collect_answers_var3(message: Message, state: FSMContext):
    user_answers = message.text.strip()
    if not user_answers:
        await message.answer("Пожалуйста, введите ваши ответы.")
        return
    
    # Отправляем обычное сообщение в чат
    await message.answer(f"Вы отправили следующие ответы:\n{user_answers}\n\nПравильные ответы:\na c b c a\n\nСпасибо за ваши ответы! Желаете пройти ещё?", reply_markup=kb.testi)
    
    # Создаем файл с результатами
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    file_content = f"""РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ
========================

Дата и время: {current_time}
Тест: Вариант 3 (Программирование)

Ваши ответы: {user_answers}
Правильные ответы: a c b c a

Вопросы и ответы:
1. Что такое отладка? - Ваш ответ: {user_answers.split()[0] if len(user_answers.split()) > 0 else 'НЕТ'} (правильный: a)
2. Что такое алгоритм? - Ваш ответ: {user_answers.split()[1] if len(user_answers.split()) > 1 else 'НЕТ'} (правильный: c)
3. Что такое блок-схема? - Ваш ответ: {user_answers.split()[2] if len(user_answers.split()) > 2 else 'НЕТ'} (правильный: b)
4. Что такое переменные? - Ваш ответ: {user_answers.split()[3] if len(user_answers.split()) > 3 else 'НЕТ'} (правильный: c)
5. Что такое массив? - Ваш ответ: {user_answers.split()[4] if len(user_answers.split()) > 4 else 'НЕТ'} (правильный: a)

Спасибо за прохождение теста!
"""
    
    # Отправляем файл
    file_bytes = file_content.encode('utf-8')
    document = BufferedInputFile(file_bytes, filename=f"test_result_var3_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    await message.answer_document(document=document, caption="📄 Ваши результаты теста")
    
    await state.clear()

@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('Введите (Фамилия, Имя)')

@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.group)
    await message.answer('Введите название группы')

@router.message(Register.group)
async def register_group(message: Message, state: FSMContext):
    await state.update_data(group=message.text)
    data = await state.get_data()
    await message.answer(f'Ваше имя: {data["name"]}\nВаша группа: {data["group"]}\n\nЧтобы начать прохождения тестов, нажмите на кнопку "Тесты", для обучения, нажмите "Подготовка"', reply_markup=kb.main)
    await state.clear()
